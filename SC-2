#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<pthread.h>
#include<semaphore.h>
struct barrier{

	int barrier_point;
	int barrier_status;
}b;

sem_t l;
int x=0,x2=0;

int init(int n)
{
	if(n>0)
	{
		sem_init(&l,0,n);
		b.barrier_point=n;
		b.barrier_status=2;
		return 0;	
	}	
	else	
	{
		return -1;
	}

}

int  barrier_point(int x)
{
	if(x==b.barrier_point)
	{
		return 0;
	}
	else
	{
		return -1;
         }
}

// Threads

void* func1()
{
	int flag=0;
	do
	{
		sem_wait(&l);
			//performs it task;
			x++;
		//sem_post(&l);
		printf("checking barrier 1");
		int temp=barrier_point(x);
		printf("barrier checked %d" ,temp);
		if(temp==0)
		{
			printf("barrier point arrive ");
			b.barrier_status-=1;
			sem_wait(&l);
			if(b.barrier_status==0)
			{
				sem_post(&l);
				printf("process started concurrently");
				flag=1;
			}
			else
			{
				flag=0;	
			}

		}
		else		
		{
		    flag=0;
		
		}
		sem_post(&l);


	}while(flag==0);

}

void* func2()
{
int flag=0;
	do
	{
		sem_wait(&l);
			//performs it task;
			x2++;
		//sem_post(&l);
		printf("checking barrier 1");
		int temp=barrier_point(x2);
		printf("barrier checked %d" ,temp);
		if(temp==0)
		{
			printf("barrier point arrive ");
			b.barrier_status-=1;
			sem_wait(&l);
			if(b.barrier_status==0)
			{
				sem_post(&l);
				printf("process started concurrently");
				flag=1;
			}
			else
			{
				flag=0;	
			}

		}
		else		
		{
		    flag=0;
		
		}
		sem_post(&l);

	}while(flag==0);

}

main()
{
	int n;
	printf("\n enter the barrier point ");
	scanf("%d",&n);
	int temp=init(n);
	if(temp==0)
	{
		printf("barrier establised sucessfully");
	}	
	else
	{
		printf("\n unable to establishe barrer point");
	}
	pthread_t pid1,pid2;
	pthread_create(&pid1,NULL,func1,NULL);
	pthread_create(&pid2,NULL,func2,NULL);
	pthread_join(pid1,NULL);
	pthread_join(pid2,NULL);

	
}
d
